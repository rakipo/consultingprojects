Article_neo4j-only_execution_tree.txt

NEO4J ARTICLE CONTENT INTELLIGENCE ENGINE - EXECUTION TREE

Purpose: Built for Neo4j freelancer. No Claude runners. No database wrangling. Only focus: ingest from universal Postgres → create a fully queryable, taxonomy-driven knowledge graph that uncovers hidden article content opportunities and powers data-driven SEO and content strategy.

----

BUSINESS CONTEXT: Why This Matters

You're building an article content intelligence engine that transforms raw written content into strategic business insights. This isn't just a database - it's a competitive advantage that reveals patterns humans can't spot manually.

What You're Competing Against:
- Manual keyword research that takes hours per article topic
- Gut feeling content decisions without search volume backing
- Missing opportunities because you can't see patterns across hundreds of articles
- Reactive SEO strategy instead of proactive content gap analysis

What Success Looks Like:
- 10-minute content research instead of hours of manual keyword analysis
- Data-driven editorial calendars with proven search opportunity scoring
- Automated competitive content analysis that spots gaps before competitors fill them
- Content series planning based on actual topic relationships and search intent

----

INTELLIGENCE GOALS: What The Graph Should Uncover

Pattern Recognition
- Topics with high search volume but low quality content coverage (SEO opportunities)
- Content formats that work best for different topics (comprehensive guides vs quick tips)
- Content gaps that appear across multiple high-authority sources (validated demand)
- Seasonal patterns in search behavior and content performance

Strategic Opportunities
- Underexplored topics with high commercial intent keywords
- Content pillar potential based on natural topic relationships
- Long-tail keyword opportunities where competition is thin
- Cross-topic opportunities for internal linking and topic clusters

Competitive Intelligence
- Content frameworks that work across multiple high-ranking articles
- Authority signals that indicate credible vs questionable sources
- Topic depth analysis that reveals comprehensive vs shallow coverage
- Content freshness patterns that drive sustained organic traffic

----

DAILY QUESTIONS: What You'll Query For

Content Planning (Weekly)
- "What are the top 5 high-urgency gaps in financial planning with high search volume potential?"
- "Show me primary topics that have fewer than 3 comprehensive articles but high commercial intent"
- "Find content gaps that appear in high-authority sources - these are validated SEO opportunities"

Competitive Research (Monthly)
- "Which topics do authoritative sites cover that I'm completely missing?"
- "What content depth works best for complex vs simple topics in my niche?"
- "Show me secondary topics that could become primary pillar content based on gap frequency"

Content Strategy (Quarterly)
- "Map out a comprehensive content hub using insights from authority sources + practical gaps"
- "Find 3 topics that frequently appear together - potential for internal linking clusters"
- "Which tertiary topics are mentioned enough to warrant dedicated long-form content?"

Performance Optimization (Ongoing)
- "Show me insights with confidence > 0.8 from authoritative sources that I haven't addressed yet"
- "Find content angles that work well for educational vs commercial intent"
- "Which misconception-type insights appear in high-ranking content but need better coverage?"

SEO Intelligence (Strategic)
- "What's the content progression from awareness → consideration → decision in my niche?"
- "Which topics have high actionability in short-form but need comprehensive guides?"
- "Find content where gaps outnumber insights - expansion opportunities for pillar pages"

----

TECHNICAL REQUIREMENTS FOR FREELANCER

PHASE 0: UNIVERSAL DATABASE INTERFACE (Available)

Input is always this universal PostgreSQL schema — no changes allowed by freelancer.

Table structure (read-only):
- content_items → Universal content metadata (all types including blog articles)
- content_insights → Structured insights with confidence
- content_gaps → Gaps/missing knowledge opportunities  
- content_topics → Hierarchy-based topic classifications
- content_hooks → Title/headline optimization (optional)

Freelancer doesn't touch this — just reads from it.

PHASE 1: BUILD NEO4J GRAPH SCHEMA

This is not just ingestion — it's semantic structuring.

Nodes to Create:
- (:Content) ← content_items table (filtered for content_type = 'blog_article')
- (:Insight) ← content_insights table  
- (:Gap) ← content_gaps table
- (:Topic) ← content_topics table
- (:Hook) ← content_hooks table (optional)

Relationships to Establish:

    (:Content)-[:CONTAINS]->(:Insight)
    (:Content)-[:HAS_GAP]->(:Gap)
    (:Content)-[:BELONGS_TO]->(:Topic)  
    (:Content)-[:HAS_HOOK]->(:Hook)

Critical Requirements:
- All merges must use primary keys
- Use MERGE not CREATE to avoid duplicates
- Normalize field types (e.g., confidence as float, hierarchy_level as enum)

PHASE 2: GRAPH TAXONOMY LOGIC

Hierarchies:
- (:Topic) uses:
    - name: "estate_planning"
    - hierarchy_level: "primary", "secondary", "tertiary"
    - audience_intent: "awareness", "consideration", "decision"

Priority Systems:
- Use (:Gap).urgency and (:Insight).confidence for downstream sorting and filtering
- All fields must be queryable in Cypher

PHASE 3: ENABLE CLAUDE-READY QUERIES

Freelancer must validate that the following queries return reliable, performant results:

Sample Queries (must test):

1. High Urgency Content Gaps:

    MATCH (c:Content)-[:HAS_GAP]->(g:Gap)
    WHERE g.urgency = "high" AND c.content_type = 'blog_article'
    RETURN c.title, g.gap_text, g.search_volume_potential
    ORDER BY c.publish_date DESC
    LIMIT 10

2. High-Authority Insights:

    MATCH (c:Content)-[:CONTAINS]->(i:Insight)
    WHERE i.confidence > 0.8 AND c.content_type = 'blog_article' AND c.source_authority_score > 0.7
    RETURN c.title, i.text, i.type, c.source_authority_score
    ORDER BY i.confidence DESC

3. Topics Needing Comprehensive Coverage:

    MATCH (c:Content)-[:BELONGS_TO]->(t:Topic), (c)-[:HAS_GAP]->(g:Gap)
    WHERE c.content_type = 'blog_article' AND g.gap_type = 'definitional'
    RETURN t.name, count(g) as gap_count, t.hierarchy_level
    ORDER BY gap_count DESC
    LIMIT 5

4. Content Angle Optimization:

    MATCH (c:Content)-[:HAS_HOOK]->(h:Hook)
    WHERE h.estimated_engagement = 'high' AND c.content_type = 'blog_article'
    RETURN c.title, h.hook_text, h.category, c.word_count

Freelancer must validate and index anything needed to support these.

5. SEO Opportunity Discovery:

    // High-value gaps in authoritative content
    MATCH (c:Content)-[:BELONGS_TO]->(t:Topic), (c)-[:HAS_GAP]->(g:Gap)
    WHERE t.hierarchy_level = 'primary' AND g.urgency = 'high' AND c.content_type = 'blog_article' AND c.source_authority_score > 0.6
    RETURN t.name, count(g) as gap_count, avg(c.source_authority_score) as avg_authority
    ORDER BY gap_count DESC, avg_authority DESC

6. Content Pillar Strategy:

    // Topics ready for comprehensive guides
    MATCH (t1:Topic)<-[:BELONGS_TO]-(c:Content)-[:BELONGS_TO]->(t2:Topic)
    WHERE t1 <> t2 AND t1.hierarchy_level = 'primary' AND c.content_type = 'blog_article'
    RETURN t1.name, collect(DISTINCT t2.name) as related_topics, count(c) as article_count, avg(c.word_count) as avg_length
    HAVING article_count >= 3

7. Authority-Weighted Intelligence:

    // High-confidence insights from credible sources
    MATCH (c:Content)-[:CONTAINS]->(i:Insight)
    WHERE i.confidence > 0.8 AND i.actionability = 'high' AND c.content_type = 'blog_article' AND c.source_authority_score > 0.7
    RETURN i.text, i.type, count(c) as frequency, avg(c.source_authority_score) as avg_authority
    ORDER BY frequency DESC, avg_authority DESC

8. Content Depth Analysis:

    // Content length patterns for engagement
    MATCH (c:Content)-[:HAS_HOOK]->(h:Hook)
    WHERE h.estimated_engagement = 'high' AND c.content_type = 'blog_article'
    RETURN h.psychology_triggers, h.category, count(*) as usage_count, avg(c.word_count) as avg_word_count
    ORDER BY usage_count DESC

----

FINAL DELIVERABLES

Freelancer must deliver:
- create_nodes.cypher → node + property schema
- create_relationships.cypher → relationship definitions  
- query_tests.cypher → test suite for key queries
- ingest_runner.py → PostgreSQL → Neo4j data pipeline
- requirements.txt → Python dependencies
- README.md:
    - how ingestion works
    - schema overview  
    - example queries Claude will use
    - indexing strategy if any

----

FINAL TREE OVERVIEW (NEO4J ONLY)

    neo4j_graphrag/
    ├── create_nodes.cypher
    ├── create_relationships.cypher  
    ├── query_tests.cypher
    ├── ingest_runner.py
    ├── requirements.txt
    └── README.md

----

 