YouTube_neo4j-only_execution_tree.txt

NEO4J YOUTUBE CONTENT INTELLIGENCE ENGINE - EXECUTION TREE

Purpose: Built for Neo4j freelancer. No Claude runners. No database wrangling. Only focus: ingest from universal Postgres → create a fully queryable, taxonomy-driven knowledge graph that uncovers hidden YouTube content opportunities and powers data-driven video strategy.

----

BUSINESS CONTEXT: Why This Matters

You're building a YouTube content intelligence engine that transforms raw video data into strategic business insights. This isn't just a database - it's a competitive advantage that reveals patterns humans can't spot manually.

What You're Competing Against:
- Manual research that takes 4-6 hours per video
- Gut feeling content decisions without data backing
- Missing opportunities because you can't see patterns across hundreds of videos
- Reactive content strategy instead of proactive gap analysis

What Success Looks Like:
- 10-minute research instead of 4-hour deep dives
- Data-driven content calendars with proven opportunity scoring
- Automated competitive intelligence that spots gaps before competitors fill them
- Series planning based on actual content relationships, not guesswork

----

INTELLIGENCE GOALS: What The Graph Should Uncover

Pattern Recognition
- Topics with high engagement but low content volume (untapped opportunities)
- Psychological hooks that consistently drive higher CTR in specific niches
- Content gaps that appear across multiple successful videos (validated demand)
- Seasonal patterns in topic performance and audience interest

Strategic Opportunities
- Underexplored topics with high search volume potential
- Content series potential based on natural topic relationships
- Audience intent gaps where demand exists but supply is thin
- Cross-topic opportunities for expanding into adjacent niches

Competitive Intelligence
- Framework patterns that work across multiple high-performing videos
- Hook psychology combinations that drive engagement
- Topic clustering that reveals natural content progression paths
- Urgency scoring to prioritize which gaps to fill first

----

DAILY QUESTIONS: What You'll Query For

Content Planning (Weekly)
- "What are the top 5 high-urgency gaps in elder law with medium-to-high search potential?"
- "Show me primary topics that have fewer than 3 videos but high engagement rates"
- "Find content gaps that appear in videos with 50K+ views - these are validated opportunities"

Competitive Research (Monthly)
- "Which topics do my competitors cover that I'm completely missing?"
- "What psychological hook combinations work best for financial planning content?"
- "Show me secondary topics that could become primary topics based on gap frequency"

Series Development (Quarterly)
- "Map out a 10-video series starting from 'medicaid_planning' using natural topic relationships"
- "Find 3 topics that frequently appear together - potential for bundled content"
- "Which tertiary topics are mentioned enough to warrant dedicated videos?"

Performance Optimization (Ongoing)
- "Show me insights with confidence > 0.8 that I haven't turned into videos yet"
- "Find hooks with CTR > 10% that I can adapt for new content"
- "Which misconception-type insights get the most engagement? More of those."

Audience Intelligence (Strategic)
- "What's the intent progression from 'estate_planning' searchers? (discovery → consideration → decision)"
- "Which topics have high actionability but low content coverage? (quick wins)"
- "Find videos where gaps outnumber insights - content that needs expansion"

----

TECHNICAL REQUIREMENTS FOR FREELANCER

PHASE 0: UNIVERSAL DATABASE INTERFACE (Available)

Input is always this universal PostgreSQL schema — no changes allowed by freelancer.

Table structure (read-only):
- content_items → Universal content metadata (all types including YouTube videos)
- content_insights → Structured insights with confidence
- content_gaps → Gaps/missing knowledge opportunities  
- content_topics → Hierarchy-based topic classifications
- content_hooks → Title/frame optimization (optional)

Freelancer doesn't touch this — just reads from it.

PHASE 1: BUILD NEO4J GRAPH SCHEMA

This is not just ingestion — it's semantic structuring.

Nodes to Create:
- (:Content) ← content_items table (filtered for content_type = 'youtube_video')
- (:Insight) ← content_insights table  
- (:Gap) ← content_gaps table
- (:Topic) ← content_topics table
- (:Hook) ← content_hooks table (optional)

Relationships to Establish:

    (:Content)-[:CONTAINS]->(:Insight)
    (:Content)-[:HAS_GAP]->(:Gap)
    (:Content)-[:BELONGS_TO]->(:Topic)  
    (:Content)-[:HAS_HOOK]->(:Hook)

Critical Requirements:
- All merges must use primary keys
- Use MERGE not CREATE to avoid duplicates
- Normalize field types (e.g., confidence as float, hierarchy_level as enum)

PHASE 2: GRAPH TAXONOMY LOGIC

Hierarchies:
- (:Topic) uses:
    - name: "medicaid_planning"
    - hierarchy_level: "primary", "secondary", "tertiary"
    - audience_intent: "trust_setup", "crisis_mitigation"

Priority Systems:
- Use (:Gap).urgency and (:Insight).confidence for downstream sorting and filtering
- All fields must be queryable in Cypher

PHASE 3: ENABLE CLAUDE-READY QUERIES

Freelancer must validate that the following queries return reliable, performant results:

Sample Queries (must test):

1. High Urgency Gaps:

    MATCH (c:Content)-[:HAS_GAP]->(g:Gap)
    WHERE g.urgency = "high" AND c.content_type = 'youtube_video'
    RETURN c.title, g.gap_text
    ORDER BY c.publish_date DESC
    LIMIT 10

2. Insights by Confidence:

    MATCH (c:Content)-[:CONTAINS]->(i:Insight)
    WHERE i.confidence > 0.8 AND c.content_type = 'youtube_video'
    RETURN c.title, i.text, i.type
    ORDER BY i.confidence DESC

3. Topics with Most Gaps:

    MATCH (c:Content)-[:BELONGS_TO]->(t:Topic), (c)-[:HAS_GAP]->(g:Gap)
    WHERE c.content_type = 'youtube_video'
    RETURN t.name, count(g) as gap_count
    ORDER BY gap_count DESC
    LIMIT 5

4. Hook Optimization:

    MATCH (c:Content)-[:HAS_HOOK]->(h:Hook)
    WHERE h.estimated_engagement = 'high' AND c.content_type = 'youtube_video'
    RETURN c.title, h.hook_text, h.category

Freelancer must validate and index anything needed to support these.

5. Opportunity Discovery:

    // High-value gaps in popular topics
    MATCH (c:Content)-[:BELONGS_TO]->(t:Topic), (c)-[:HAS_GAP]->(g:Gap)
    WHERE t.hierarchy_level = 'primary' AND g.urgency = 'high' AND c.content_type = 'youtube_video'
    RETURN t.name, count(g) as gap_count, avg(toInteger(c.engagement_metrics.view_count)) as avg_views
    ORDER BY gap_count DESC, avg_views DESC

6. Content Strategy:

    // Topics ready for series development  
    MATCH (t1:Topic)<-[:BELONGS_TO]-(c:Content)-[:BELONGS_TO]->(t2:Topic)
    WHERE t1 <> t2 AND t1.hierarchy_level = 'primary' AND c.content_type = 'youtube_video'
    RETURN t1.name, collect(DISTINCT t2.name) as related_topics, count(c) as video_count
    HAVING video_count >= 3

7. Performance Intelligence:

    // High-confidence insights not yet exploited
    MATCH (c:Content)-[:CONTAINS]->(i:Insight)
    WHERE i.confidence > 0.8 AND i.actionability = 'high' AND c.content_type = 'youtube_video'
    RETURN i.text, i.type, count(c) as frequency
    ORDER BY frequency DESC, i.confidence DESC

8. Psychology Optimization:

    // Hook patterns that drive engagement
    MATCH (c:Content)-[:HAS_HOOK]->(h:Hook)
    WHERE h.estimated_engagement = 'high' AND c.content_type = 'youtube_video'
    RETURN h.psychology_triggers, h.category, count(*) as usage_count, avg(toInteger(c.engagement_metrics.view_count)) as avg_performance
    ORDER BY avg_performance DESC

----

FINAL DELIVERABLES

Freelancer must deliver:
- create_nodes.cypher → node + property schema
- create_relationships.cypher → relationship definitions  
- query_tests.cypher → test suite for key queries
- ingest_runner.py → PostgreSQL → Neo4j data pipeline
- requirements.txt → Python dependencies
- README.md:
    - how ingestion works
    - schema overview  
    - example queries Claude will use
    - indexing strategy if any

----

FINAL TREE OVERVIEW (NEO4J ONLY)

    neo4j_graphrag/
    ├── create_nodes.cypher
    ├── create_relationships.cypher  
    ├── query_tests.cypher
    ├── ingest_runner.py
    ├── requirements.txt
    └── README.md

----

WHY THIS MATTERS TO YOUR BUSINESS

Time Savings: 4-hour research → 10-minute queries  
Revenue Impact: Data-driven content strategy vs. guesswork  
Competitive Advantage: Spot opportunities before competitors  
Scale Enabler: Intelligence that grows with your content library  

Bottom Line: This graph transforms content creation from reactive guesswork into proactive, data-driven strategy.