Social_neo4j-only_execution_tree.txt

NEO4J SOCIAL MEDIA CONTENT INTELLIGENCE ENGINE - EXECUTION TREE

Purpose: Built for Neo4j freelancer. No Claude runners. No database wrangling. Only focus: ingest from universal Postgres → create a fully queryable, taxonomy-driven knowledge graph that uncovers hidden social media content opportunities and powers data-driven cross-platform strategy.

----

BUSINESS CONTEXT: Why This Matters

You're building a social media content intelligence engine that transforms raw social content into strategic business insights. This isn't just a database - it's a competitive advantage that reveals patterns humans can't spot manually.

What You're Competing Against:
- Manual social media research that takes hours per platform
- Gut feeling content decisions without cross-platform data backing
- Missing opportunities because you can't see patterns across LinkedIn, Twitter, TikTok, Instagram
- Reactive social strategy instead of proactive cross-platform optimization

What Success Looks Like:
- 10-minute cross-platform research instead of hours of manual analysis
- Data-driven content calendars with proven engagement scoring across platforms
- Automated competitive social analysis that spots viral patterns before competitors replicate them
- Cross-platform optimization based on actual content performance relationships

----

INTELLIGENCE GOALS: What The Graph Should Uncover

Pattern Recognition
- Topics with high engagement on one platform but low coverage on others (untapped opportunities)
- Content formats that work best across different social platforms
- Cross-platform content gaps that appear across multiple successful accounts (validated demand)
- Viral timing patterns and platform-specific engagement behaviors

Strategic Opportunities
- Underexplored topics with high engagement potential across platforms
- Content repurposing opportunities based on natural format adaptations
- Platform-specific audience intent gaps where engagement exists but content is thin
- Cross-platform amplification opportunities for expanding reach

Competitive Intelligence
- Content frameworks that work across multiple high-performing social accounts
- Platform-specific psychology triggers that drive engagement
- Cross-platform topic clustering that reveals natural content progression paths
- Engagement pattern analysis that shows optimal posting strategies

----

DAILY QUESTIONS: What You'll Query For

Content Planning (Weekly)
- "What are the top 5 high-urgency gaps in professional content across LinkedIn, Twitter, and TikTok?"
- "Show me primary topics that perform well on LinkedIn but are missing from Twitter"
- "Find content gaps that appear in viral posts - these are validated engagement opportunities"

Cross-Platform Strategy (Monthly)
- "Which topics do successful accounts cover on TikTok that I'm completely missing on LinkedIn?"
- "What content formats work best for educational vs entertainment across platforms?"
- "Show me secondary topics that could become primary content themes based on cross-platform gap frequency"

Viral Optimization (Quarterly)
- "Map out a cross-platform content strategy using viral patterns from LinkedIn + Twitter insights"
- "Find 3 topics that frequently go viral together - potential for coordinated campaigns"
- "Which tertiary topics are mentioned enough across platforms to warrant dedicated content series?"

Performance Optimization (Ongoing)
- "Show me insights with confidence > 0.8 from viral posts that I haven't adapted yet"
- "Find content angles that work well for professional vs casual platforms"
- "Which psychology-driven hooks get the most engagement across different platforms?"

Platform Intelligence (Strategic)
- "What's the content adaptation progression from LinkedIn → Twitter → TikTok?"
- "Which topics have high actionability on LinkedIn but work better as entertainment on TikTok?"
- "Find posts where engagement patterns reveal optimal cross-platform timing"

----

TECHNICAL REQUIREMENTS FOR FREELANCER

PHASE 0: UNIVERSAL DATABASE INTERFACE (Available)

Input is always this universal PostgreSQL schema — no changes allowed by freelancer.

Table structure (read-only):
- content_items → Universal content metadata (all types including social media posts)
- content_insights → Structured insights with confidence
- content_gaps → Gaps/missing knowledge opportunities  
- content_topics → Hierarchy-based topic classifications
- content_hooks → Social media optimization (optional)

Freelancer doesn't touch this — just reads from it.

PHASE 1: BUILD NEO4J GRAPH SCHEMA

This is not just ingestion — it's semantic structuring.

Nodes to Create:
- (:Content) ← content_items table (filtered for social media content_types)
- (:Insight) ← content_insights table  
- (:Gap) ← content_gaps table
- (:Topic) ← content_topics table
- (:Hook) ← content_hooks table (optional)

Relationships to Establish:

    (:Content)-[:CONTAINS]->(:Insight)
    (:Content)-[:HAS_GAP]->(:Gap)
    (:Content)-[:BELONGS_TO]->(:Topic)  
    (:Content)-[:HAS_HOOK]->(:Hook)

Critical Requirements:
- All merges must use primary keys
- Use MERGE not CREATE to avoid duplicates
- Normalize field types (e.g., confidence as float, hierarchy_level as enum)
- Filter for social media content_types: 'linkedin_post', 'twitter_post', 'tiktok_video', 'instagram_post'

PHASE 2: GRAPH TAXONOMY LOGIC

Hierarchies:
- (:Topic) uses:
    - name: "professional_development"
    - hierarchy_level: "primary", "secondary", "tertiary"
    - audience_intent: "education", "entertainment", "networking", "thought_leadership"

Priority Systems:
- Use (:Gap).urgency and (:Insight).confidence for downstream sorting and filtering
- All fields must be queryable in Cypher

PHASE 3: ENABLE CLAUDE-READY QUERIES

Freelancer must validate that the following queries return reliable, performant results:

Sample Queries (must test):

1. Cross-Platform Gap Analysis:

    MATCH (c:Content)-[:HAS_GAP]->(g:Gap)
    WHERE g.urgency = "high" AND c.content_type IN ['linkedin_post', 'twitter_post', 'tiktok_video', 'instagram_post']
    RETURN c.content_type, c.title, g.gap_text
    ORDER BY c.publish_date DESC
    LIMIT 10

2. Platform-Specific High-Engagement Insights:

    MATCH (c:Content)-[:CONTAINS]->(i:Insight)
    WHERE i.confidence > 0.8 AND c.content_type IN ['linkedin_post', 'twitter_post', 'tiktok_video', 'instagram_post']
    RETURN c.content_type, c.title, i.text, i.type
    ORDER BY i.confidence DESC

3. Topics Missing Across Platforms:

    MATCH (c:Content)-[:BELONGS_TO]->(t:Topic), (c)-[:HAS_GAP]->(g:Gap)
    WHERE c.content_type IN ['linkedin_post', 'twitter_post', 'tiktok_video', 'instagram_post']
    RETURN t.name, c.content_type, count(g) as gap_count
    ORDER BY gap_count DESC
    LIMIT 10

4. Cross-Platform Hook Optimization:

    MATCH (c:Content)-[:HAS_HOOK]->(h:Hook)
    WHERE h.estimated_engagement = 'high' AND c.content_type IN ['linkedin_post', 'twitter_post', 'tiktok_video', 'instagram_post']
    RETURN c.content_type, h.hook_text, h.psychology_triggers, count(*) as frequency
    ORDER BY frequency DESC

Freelancer must validate and index anything needed to support these.

5. Platform Opportunity Discovery:

    // High-value gaps across social platforms
    MATCH (c:Content)-[:BELONGS_TO]->(t:Topic), (c)-[:HAS_GAP]->(g:Gap)
    WHERE t.hierarchy_level = 'primary' AND g.urgency = 'high' AND c.content_type IN ['linkedin_post', 'twitter_post', 'tiktok_video', 'instagram_post']
    RETURN t.name, c.content_type, count(g) as gap_count, avg(toInteger(c.engagement_metrics.engagement_rate)) as avg_engagement
    ORDER BY gap_count DESC, avg_engagement DESC

6. Cross-Platform Content Strategy:

    // Topics that work across multiple platforms
    MATCH (t:Topic)<-[:BELONGS_TO]-(c:Content)
    WHERE c.content_type IN ['linkedin_post', 'twitter_post', 'tiktok_video', 'instagram_post'] AND t.hierarchy_level = 'primary'
    RETURN t.name, collect(DISTINCT c.content_type) as platforms, count(c) as total_posts
    HAVING size(platforms) >= 2
    ORDER BY total_posts DESC

7. Viral Pattern Intelligence:

    // High-confidence insights from viral content
    MATCH (c:Content)-[:CONTAINS]->(i:Insight)
    WHERE i.confidence > 0.8 AND i.actionability = 'high' AND c.content_type IN ['linkedin_post', 'twitter_post', 'tiktok_video', 'instagram_post']
    RETURN c.content_type, i.text, i.type, count(c) as frequency, avg(toInteger(c.engagement_metrics.engagement_rate)) as avg_engagement
    ORDER BY frequency DESC, avg_engagement DESC

8. Platform Psychology Analysis:

    // Hook patterns that drive engagement by platform
    MATCH (c:Content)-[:HAS_HOOK]->(h:Hook)
    WHERE h.estimated_engagement = 'high' AND c.content_type IN ['linkedin_post', 'twitter_post', 'tiktok_video', 'instagram_post']
    RETURN c.content_type, h.psychology_triggers, h.category, count(*) as usage_count, avg(toInteger(c.engagement_metrics.engagement_rate)) as avg_performance
    ORDER BY c.content_type, avg_performance DESC

----

FINAL DELIVERABLES

Freelancer must deliver:
- create_nodes.cypher → node + property schema
- create_relationships.cypher → relationship definitions  
- query_tests.cypher → test suite for key queries
- ingest_runner.py → PostgreSQL → Neo4j data pipeline
- requirements.txt → Python dependencies
- README.md:
    - how ingestion works
    - schema overview  
    - example queries Claude will use
    - indexing strategy if any

----

FINAL TREE OVERVIEW (NEO4J ONLY)

    neo4j_graphrag/
    ├── create_nodes.cypher
    ├── create_relationships.cypher  
    ├── query_tests.cypher
    ├── ingest_runner.py
    ├── requirements.txt
    └── README.md

 