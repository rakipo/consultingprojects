00_GET_STARTED.txt

MASTER Content Intelligence System - Quick Start Guide
Version 1.0

----

DEPLOYMENT IN 5 STEPS

STEP 1: Setup PostgreSQL Database

    # Run the universal schema
    psql -U your_username -d your_database -f 02_Postgresql_schema_for_universal_content_intelligence_system.txt

    # Verify tables created
    psql -U your_username -d your_database -c "\dt"

    # You should see:
    # content_items, content_insights, content_gaps, content_topics, content_hooks

STEP 2: Add Your Content (Choose Your Platform)

YouTube Content:

    # Connect your YouTube channel
    INSERT INTO content_items (content_id, title, content_type, content_text, publish_date, source_url) 
    VALUES 
    ('yt_001', 'Your Actual Video Title', 'youtube_video', 'Your video transcript here...', '2024-01-01', 'https://youtube.com/watch?v=xyz'),
    ('yt_002', 'Another Video Title', 'youtube_video', 'Another transcript...', '2024-01-02', 'https://youtube.com/watch?v=abc');

Blog/Article Content:

    INSERT INTO content_items (content_id, title, content_type, content_text, publish_date, source_url) 
    VALUES 
    ('blog_001', 'Your Blog Post Title', 'blog_article', 'Your article content here...', '2024-01-01', 'https://yourblog.com/post1'),
    ('blog_002', 'Another Article Title', 'blog_article', 'More article content...', '2024-01-02', 'https://yourblog.com/post2');

Podcast Content:

    INSERT INTO content_items (content_id, title, content_type, content_text, publish_date, source_url) 
    VALUES 
    ('pod_001', 'Your Podcast Episode Title', 'podcast_episode', 'Episode transcript here...', '2024-01-01', 'https://yourpodcast.com/ep1'),
    ('pod_002', 'Another Episode Title', 'podcast_episode', 'Another transcript...', '2024-01-02', 'https://yourpodcast.com/ep2');

Social Media Content:

    INSERT INTO content_items (content_id, title, content_type, content_text, publish_date, source_url) 
    VALUES 
    ('li_001', 'Your LinkedIn Post Title', 'linkedin_post', 'LinkedIn post content here...', '2024-01-01', 'https://linkedin.com/posts/yourpost'),
    ('tw_001', 'Your Twitter Thread Title', 'twitter_post', 'Twitter thread content...', '2024-01-01', 'https://twitter.com/you/status/123');

STEP 3: Watch Claude Analyze Your Content

Run Claude enrichment to extract insights, gaps, and opportunities:

    # This processes your content and extracts business intelligence
    python scripts/run_claude_enrichment.py

    # Verify Claude analysis completed
    psql -U your_username -d your_database -c "SELECT content_type, COUNT(*) FROM content_insights GROUP BY content_type;"

    # You should see insights extracted for each content type

STEP 4: Deploy Neo4j Graph Database and Test Intelligence

Choose your content type and run the corresponding setup:

For YouTube Intelligence:

    neo4j-shell -file YouTube_create_nodes.cypher.txt
    
    # Test with strategic YouTube queries (48 available):
    # "What are the top 5 high-urgency gaps in my video content?"
    # "Which video topics have high engagement potential but low coverage?"

For Article Intelligence:

    neo4j-shell -file Article_create_nodes.cypher.txt
    
    # Test with SEO and content queries (55 available):
    # "What keywords have search volume >50K but weak competing articles?"
    # "Which topics need comprehensive guides vs quick tips?"

For Podcast Intelligence:

    neo4j-shell -file Podcast_create_nodes.cypher.txt
    
    # Test with episode and series queries (75 available):
    # "What guest expertise combinations work best for complex topics?"
    # "Which episode topics create series potential based on listener retention?"

For Social Media Intelligence:

    neo4j-shell -file Social_create_nodes.cypher.txt
    
    # Test with cross-platform queries (90 available):
    # "What content performs well on LinkedIn but missing from Twitter?"
    # "Which viral patterns work across multiple platforms?"

Run All Content Types (Unified Intelligence):

    neo4j-shell -file YouTube_create_nodes.cypher.txt
    neo4j-shell -file Article_create_nodes.cypher.txt
    neo4j-shell -file Podcast_create_nodes.cypher.txt
    neo4j-shell -file Social_create_nodes.cypher.txt

STEP 5: Setup MCP Server for Natural Language Queries

Deploy MCP Cypher Server:

    # Option 1: Docker Deployment (Recommended)
    docker run -d \
      --name neo4j-mcp-server \
      -p 8080:8080 \
      -e NEO4J_URI=bolt://localhost:7687 \
      -e NEO4J_USER=neo4j \
      -e NEO4J_PASSWORD=your_password \
      -e MCP_SERVER_HOST=0.0.0.0 \
      -e MCP_SERVER_PORT=8080 \
      neo4j/mcp-cypher-server:latest

    # Option 2: Python Installation
    pip install neo4j-mcp-server
    export NEO4J_URI=bolt://localhost:7687
    export NEO4J_USER=neo4j
    export NEO4J_PASSWORD=your_password
    neo4j-mcp-server --transport stdio

Configure Claude Desktop for MCP:

    # Edit ~/.claude/config.json (create if doesn't exist)
    {
      "mcp_servers": {
        "neo4j-intelligence": {
          "command": "neo4j-mcp-server",
          "transport": "stdio",
          "env": {
            "NEO4J_URI": "bolt://localhost:7687",
            "NEO4J_USER": "neo4j",
            "NEO4J_PASSWORD": "your_password"
          }
        }
      }
    }

    # Restart Claude Desktop to load MCP server

Test Natural Language Queries:

    # In Claude Desktop, you can now ask:
    "What are the top 5 content gaps in my healthcare content?"
    "Show me insights with confidence > 0.8 from recent articles"
    "Find topics that work well in videos but missing from blog posts"
    "Which content formats get highest engagement for complex topics?"

Validate MCP Connection:

    # Test MCP server health
    curl http://localhost:8080/health

    # Test MCP capabilities
    python scripts/test_mcp_connection.py

----

CONTENT TYPE SETUP PRIORITY

Start Here (High ROI):
1. YouTube Intelligence - If you create video content
2. Article Intelligence - If you need SEO/blog strategy  
3. Social Intelligence - If you're active on LinkedIn/Twitter/TikTok

Add Later (Expansion):
4. Podcast Intelligence - When you start audio content

----

STRATEGIC QUERY EXAMPLES

Once your Neo4j graph is populated and MCP server is running, you can ask these business questions in natural language:

YouTube Strategy:
- "What are the top 5 high-urgency gaps in financial planning videos?"
- "Which video topics have <3 pieces but high engagement potential?"
- "Show me hook patterns from videos with 1M+ views"

Article SEO:
- "What keywords have search volume >50K but weak competing articles?"
- "Which topics need comprehensive guides vs quick tips?"
- "Find long-tail variations of my successful topics that need dedicated posts"

Social Media:
- "What content performs well on LinkedIn but missing from Twitter?"
- "Which viral patterns work across multiple platforms?"
- "Find psychology-driven hooks that get engagement without damaging authority"

Cross-Platform Intelligence:
- "Which successful video content would 10x in value as detailed written guides?"
- "What topics work well in long-form PDFs but are missing from short-form articles?"
- "Find insights that work as free content vs premium paid content"

Natural Language Advanced Queries:
- "Create a content calendar for next month based on my highest-opportunity gaps"
- "What content series could I create using related topics in my graph?"
- "Show me competitor content patterns I should adapt to my niche"
- "Find content that creates natural product placement opportunities"

----

SYSTEM REQUIREMENTS

Database Requirements:
- PostgreSQL 12+
- Neo4j 4.0+
- 4GB RAM minimum
- 50GB storage for 100K+ content pieces

API Integration:
- Claude API access for content analysis
- OpenAI embeddings for vector search (optional)

MCP Requirements:
- Neo4j MCP Cypher Server
- Python 3.8+ for MCP client libraries
- Claude Desktop or MCP-compatible client

Content Sources:
- YouTube transcripts
- Blog/article content  
- Podcast transcripts
- Social media posts

----

TROUBLESHOOTING

Common Issues:

PostgreSQL Connection:

    # Check connection
    pg_isready -h localhost -p 5432

    # Reset password if needed
    sudo -u postgres psql -c "ALTER USER your_username PASSWORD 'new_password';"

Neo4j Memory:

    # Increase memory in neo4j.conf
    dbms.memory.heap.initial_size=1G
    dbms.memory.heap.max_size=2G

MCP Server Issues:

    # Check MCP server status
    curl http://localhost:8080/health

    # Check MCP server logs
    docker logs neo4j-mcp-server

    # Test MCP connection
    python -c "
    import requests
    response = requests.get('http://localhost:8080/health')
    print(f'MCP Status: {response.status_code}')
    "

Claude Desktop MCP Integration:

    # Verify config file location
    # macOS: ~/.claude/config.json
    # Windows: %APPDATA%\Claude\config.json
    # Linux: ~/.config/claude/config.json

    # Check Claude Desktop logs for MCP connection
    # Look for "MCP server connected" or connection errors

    # Restart Claude Desktop after config changes

Content Ingestion:
- Ensure content_type matches expected enum values: "youtube_video", "blog_article", "podcast_episode", "linkedin_post", etc.
- Check character encoding for special characters in content_text

Claude API Issues:
- Verify your Claude API key is active and has sufficient credits
- Check rate limits if processing large amounts of content
- Ensure content_text field is not empty for analysis

----

NEXT STEPS

Phase 1: Foundation  
1. Deploy universal PostgreSQL schema
2. Add 10-50 pieces of your actual content
3. Setup one content type (YouTube or Articles)
4. Setup MCP server and test natural language queries
5. Test 5-10 strategic queries to see business value

Phase 2: Expansion  
1. Add remaining content types that apply to your business
2. Scale to 100-500 content pieces
3. Test cross-format intelligence queries
4. Train your team on natural language query patterns

Phase 3: Optimization  
1. Implement automated content ingestion workflows
2. Add automated content gap alerts for your team
3. Setup business intelligence dashboards
4. Scale to 1000+ content pieces

----

SUCCESS METRICS

1 Targets:
- All databases deployed and connected
- MCP server running and accessible via natural language
- Your actual content analyzed (not sample data)
- 5+ strategic queries returning actionable insights for your business

2 Targets:
- 100+ pieces of your content in system
- Content type(s) operational that match your business
- Your team using natural language queries for actual content strategy decisions
- Cross-format intelligence providing new insights

3 Targets:
- 1000+ content pieces analyzed
- Automated content gap identification via MCP
- Measurable improvement in your content performance metrics
- Natural language interface integrated into daily workflow

----

SUPPORT

Architecture Questions: Reference 01_Content_intelligence_platform_architecture.txt
Database Issues: Reference 02_Postgresql_schema_for_universal_content_intelligence_system.txt  
Neo4j Setup: Reference content-specific execution tree files
Strategic Queries: Reference content-specific questions files
MCP Integration: Reference 03_execution Tree_neo4j Universal Content Intelligence Engine.txt