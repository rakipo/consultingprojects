# config/neo4j_setup.md

## Neo4j MCP Configuration & Schema

## MCP Config (config/mcp_config.json)
```json
{
  "tools": [
    {
      "tool_name": "Neo4j Cypher",
      "tool_type": "cypher", 
      "tool_url": "http://localhost:8080",
      "tool_description": "Neo4j graph database via MCP server"
    }
  ]
}
```

## Environment Setup (config/.env)
```bash
# PostgreSQL
PG_HOST=localhost
PG_PORT=5432
PG_DATABASE=content_db
PG_USER=postgres
PG_PASSWORD=password

# Neo4j
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=password

# Claude API
CLAUDE_API_KEY=your-claude-key-here
```

## Docker Setup (docker-compose.yml)
```yaml
version: '3.8'
services:
  neo4j:
    image: neo4j:5.15
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/password
    volumes:
      - neo4j_data:/data

  neo4j-mcp:
    image: neo4j/mcp-cypher-server:latest
    ports:
      - "8080:8080"
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
    depends_on:
      - neo4j

volumes:
  neo4j_data:
```

## Graph Schema (schema/init.cypher)
```cypher
-- Constraints
CREATE CONSTRAINT article_id FOR (a:Article) REQUIRE a.id IS UNIQUE;
CREATE CONSTRAINT topic_name FOR (t:Topic) REQUIRE t.name IS UNIQUE;
CREATE CONSTRAINT author_name FOR (au:Author) REQUIRE au.name IS UNIQUE;
CREATE CONSTRAINT entity_name FOR (e:Entity) REQUIRE e.name IS UNIQUE;

-- Indexes
CREATE INDEX article_date FOR (a:Article) ON (a.publish_date);
CREATE INDEX article_domain FOR (a:Article) ON (a.domain);
```

## Entity Extraction Rules (prompts/entity_rules.md)
Extract these entity types from article content:
- PERSON: Names of individuals mentioned
- ORGANIZATION: Companies, institutions, agencies
- TECHNOLOGY: AI models, software, platforms
- CONCEPT: Abstract ideas, methodologies
- LOCATION: Places, regions, countries

## Claude Transformation Prompt (prompts/transform_article.md)
```markdown
Convert article to Neo4j graph format.

INPUT:
{
  "id": "article-001",
  "title": "AI for Aging Populations", 
  "content": "AI is transforming elder care...",
  "tags": ["AI", "Elder Care"],
  "author": "Dr. Susan Lee",
  "publish_date": "2025-07-25",
  "domain": "agingeconomy.com"
}

OUTPUT (JSON only):
{
  "nodes": [
    {
      "label": "Article",
      "properties": {
        "id": "article-001",
        "title": "AI for Aging Populations",
        "publish_date": "2025-07-25", 
        "domain": "agingeconomy.com"
      }
    },
    {
      "label": "Topic", 
      "properties": {"name": "AI"}
    },
    {
      "label": "Author",
      "properties": {"name": "Dr. Susan Lee"}
    },
    {
      "label": "Entity",
      "properties": {"name": "elder care", "type": "concept"}
    }
  ],
  "relationships": [
    {"from": "Article", "to": "Topic", "type": "TAGS"},
    {"from": "Article", "to": "Author", "type": "WRITTEN_BY"},
    {"from": "Article", "to": "Entity", "type": "MENTIONS"}
  ]
}

Extract entities from content. Use exact property names. Return valid JSON only.
```