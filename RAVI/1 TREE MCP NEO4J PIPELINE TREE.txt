MCP NEO4J PIPELINE TREE

Overview
This is the core data transformation engine that converts flat PostgreSQL articles into an intelligent Neo4j knowledge graph. It uses Claude AI to extract entities (people, organizations, technologies) from your content and creates semantic relationships between articles, topics, and concepts. The result is a queryable graph where you can ask complex questions like "What content do I have about family caregivers and AI?" or "Which authors write about similar pain points?"

Why This Tree Exists
Raw article data in PostgreSQL is like having a library with no catalog system - you can't find connections or patterns. This pipeline transforms that flat data into a smart graph where every piece of content is connected to related topics, entities, and other articles. Once built, you can discover content gaps, identify trending themes, and generate strategic insights that would be impossible with traditional database queries.

Relationship to Other Trees
- Tree 2 (Phase 1 MVP): A simplified 1-week version of this pipeline for rapid prototyping
- Tree 3 (Strategic Intelligence): Business intelligence queries that run ON TOP of the graph this tree creates
- This tree provides the foundation - without it, the other trees have no data to work with

MCP_NEO4J_PIPELINE/
├── .claudeproject                       ← Claude project config
├── claude.toml                         ← MCP job routing + Claude settings
├── requirements.txt                    ← Python dependencies
├── docker-compose.yml                  ← Neo4j + MCP server setup
├── .env                               ← Database credentials & API keys
│
├── claude_prompt_versions/            ← Versioned Claude prompts for MCP
│   ├── entity_extraction.claude.txt      ← Extract people/orgs/tech from articles
│   ├── graph_transform.claude.txt        ← Convert articles to nodes/relationships
│   ├── strategic_query.claude.txt        ← Business intelligence questions
│   └── persona_analysis.claude.txt       ← Audience & persona discovery
│
├── 00_CONFIG/
│   ├── neo4j_schema.cypher            ← Graph constraints & indexes
│   ├── mcp_server_config.json         ← MCP Cypher server settings
│   ├── entity_rules.json              ← Entity extraction patterns
│   └── postgres_schema.sql            ← Source table structure
│
├── 01_DATA_EXTRACTION/
│   ├── postgres_extractor.py          ← Pull articles from structured_content
│   ├── article_validator.py           ← Validate article completeness
│   └── batch_processor.py             ← Process articles in chunks
│
├── 02_TRANSFORMATION/
│   ├── claude_transformer.py          ← Claude API entity extraction
│   ├── fallback_extractor.py          ← Regex patterns when Claude fails
│   ├── graph_formatter.py             ← Structure nodes/relationships
│   └── deduplication.py               ← Remove duplicate entities
│
├── 03_GRAPH_INGESTION/
│   ├── neo4j_connector.py             ← Neo4j database connection
│   ├── cypher_builder.py              ← Generate MERGE statements
│   ├── relationship_creator.py        ← Build graph relationships
│   └── schema_validator.py            ← Ensure schema compliance
│
├── 04_MCP_INTEGRATION/
│   ├── mcp_server_manager.py          ← Start/stop MCP Cypher server
│   ├── claude_mcp_client.py           ← Claude ↔ MCP communication
│   ├── query_processor.py             ← Natural language → Cypher
│   └── response_formatter.py          ← Format MCP results for Claude
│
├── 05_STRATEGIC_QUERIES/
│   ├── persona_discovery.py           ← Find audience segments in graph
│   ├── content_gap_analysis.py        ← Identify missing topics/coverage
│   ├── monetization_mapper.py         ← Map pain points to offers
│   └── trend_analyzer.py              ← Discover emerging themes
│
├── 06_RUNNERS/
│   ├── pipeline_orchestrator.py       ← Main pipeline execution
│   ├── daily_ingestion.py             ← Scheduled data processing
│   ├── mcp_query_runner.py            ← Execute strategic queries via MCP
│   └── health_checker.py              ← Validate pipeline health
│
└── README.md                          ← Pipeline overview & usage guide


----


CORE MCP JOBS (10 Total):

Data Flow Jobs:
    1. EXTRACT_ARTICLES - Pull from PostgreSQL
    2. CLAUDE_TRANSFORM - Extract entities via Claude API
    3. BUILD_GRAPH_NODES - Create Article/Author/Entity nodes
    4. CREATE_RELATIONSHIPS - Build MENTIONS/TAGS/WRITTEN_BY edges
    5. INGEST_TO_NEO4J - Load graph into Neo4j

Intelligence Jobs:
    6. MCP_SERVER_INIT - Start MCP Cypher server
    7. PERSONA_DISCOVERY - Find audience segments via MCP
    8. CONTENT_GAP_ANALYSIS - Identify missing topics
    9. STRATEGIC_QUERY - Business intelligence via natural language
    10. GRAPH_VALIDATION - Ensure data quality & completeness


----


MCP WORKFLOW:

PostgreSQL Articles
       ↓ (extract_articles)
Claude Entity Extraction  
       ↓ (transform_to_graph)
Neo4j Graph Database
       ↓ (mcp_server_init)
MCP Cypher Server :8080
       ↓ (strategic_queries)
Business Intelligence


----


KEY FILES:

- pipeline_orchestrator.py - Main entry point, runs full pipeline
- claude_transformer.py - Core Claude API integration for entity extraction
- mcp_server_manager.py - Manages MCP Cypher server lifecycle
- strategic_queries/ - Business intelligence query templates
- claude_prompt_versions/ - Versioned prompts for consistent results