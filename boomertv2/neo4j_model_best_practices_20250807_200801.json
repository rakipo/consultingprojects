{
  "model_info": {
    "generated_by": "Neo4j Model Generator (Configured)",
    "generated_at": "2025-08-07T20:08:04.152244",
    "source_table_columns": [
      "id",
      "url",
      "raw_html_id",
      "domain",
      "site_name",
      "title",
      "author",
      "publish_date",
      "content",
      "summary",
      "tags",
      "language",
      "word_count",
      "meta_description",
      "extracted_at",
      "is_latest",
      "run_id"
    ],
    "total_records": 2,
    "configuration_applied": true
  },
  "nodes": [
    {
      "label": "Article",
      "node_id_property": "id",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "unique": true
        },
        {
          "name": "title",
          "type": "string",
          "indexed": true
        },
        {
          "name": "content",
          "type": "text",
          "indexed": true
        },
        {
          "name": "summary",
          "type": "text"
        },
        {
          "name": "publish_date",
          "type": "datetime"
        },
        {
          "name": "word_count",
          "type": "integer"
        },
        {
          "name": "is_latest",
          "type": "boolean"
        }
      ],
      "description": "Node representing Article entities"
    },
    {
      "label": "Website",
      "node_id_property": "domain",
      "properties": [
        {
          "name": "domain",
          "type": "string",
          "unique": true,
          "alias": "site_domain"
        },
        {
          "name": "site_name",
          "type": "string",
          "indexed": true,
          "alias": "name"
        }
      ],
      "description": "Node representing Website entities",
      "multiple_labels": [
        "Source"
      ]
    },
    {
      "label": "Author",
      "node_id_property": "author",
      "properties": [],
      "description": "Node representing Author entities"
    },
    {
      "label": "Chunk",
      "node_id_property": "chunk_id",
      "properties": [
        {
          "name": "embedding",
          "type": "vector",
          "vector_dimension": 1536,
          "vector_similarity": "cosine"
        }
      ],
      "description": "Node representing Chunk entities"
    }
  ],
  "relationships": [
    {
      "type": "PUBLISHED_ON",
      "start_node": "Article",
      "end_node": "Website",
      "start_property": "domain",
      "end_property": "domain",
      "properties": [
        {
          "name": "url",
          "type": "string"
        }
      ],
      "description": "Relationship PUBLISHED_ON from Article to Website"
    },
    {
      "type": "HAS_CHUNK",
      "start_node": "Article",
      "end_node": "Chunk",
      "start_property": "id",
      "end_property": "chunk_id",
      "properties": [
        {
          "name": "chunk_order",
          "type": "integer"
        },
        {
          "name": "chunk_position",
          "type": "integer"
        }
      ],
      "description": "Relationship HAS_CHUNK from Article to Chunk"
    },
    {
      "type": "WRITTEN_BY",
      "start_node": "Article",
      "end_node": "Author",
      "start_property": "author",
      "end_property": "name",
      "properties": [
        {
          "name": "publish_date",
          "type": "datetime"
        }
      ],
      "description": "Relationship WRITTEN_BY from Article to Author"
    },
    {
      "type": "TAGGED_WITH",
      "start_node": "Article",
      "end_node": "Tag",
      "start_property": "id",
      "end_property": "tag_name",
      "properties": [],
      "description": "Relationship TAGGED_WITH from Article to Tag"
    }
  ],
  "constraints": [
    {
      "type": "UNIQUE",
      "node_label": "Article",
      "property": "id",
      "cypher": "CREATE CONSTRAINT article_id_unique IF NOT EXISTS FOR (n:Article) REQUIRE n.id IS UNIQUE"
    },
    {
      "type": "UNIQUE",
      "node_label": "Website",
      "property": "domain",
      "cypher": "CREATE CONSTRAINT website_domain_unique IF NOT EXISTS FOR (n:Website) REQUIRE n.domain IS UNIQUE"
    },
    {
      "type": "UNIQUE",
      "node_label": "Author",
      "property": "name",
      "cypher": "CREATE CONSTRAINT author_name_unique IF NOT EXISTS FOR (n:Author) REQUIRE n.name IS UNIQUE"
    },
    {
      "type": "UNIQUE",
      "node_label": "Chunk",
      "property": "chunk_id",
      "cypher": "CREATE CONSTRAINT chunk_chunk_id_unique IF NOT EXISTS FOR (n:Chunk) REQUIRE n.chunk_id IS UNIQUE"
    }
  ],
  "indexes": [
    {
      "type": "STRING",
      "node_label": "Article",
      "property": "title",
      "cypher": "CREATE INDEX article_title_text IF NOT EXISTS FOR (n:Article) ON (n.title)"
    },
    {
      "type": "TEXT",
      "node_label": "Article",
      "property": "content",
      "cypher": "CREATE INDEX article_content_text IF NOT EXISTS FOR (n:Article) ON (n.content)"
    },
    {
      "type": "STRING",
      "node_label": "Website",
      "property": "site_name",
      "cypher": "CREATE INDEX website_site_name_text IF NOT EXISTS FOR (n:Website) ON (n.site_name)"
    },
    {
      "type": "RANGE",
      "node_label": "Article",
      "property": "publish_date",
      "cypher": "CREATE INDEX article_publish_date_range IF NOT EXISTS FOR (n:Article) ON (n.publish_date)"
    },
    {
      "type": "TEXT",
      "node_label": "Website",
      "property": "domain",
      "cypher": "CREATE INDEX website_domain_text IF NOT EXISTS FOR (n:Website) ON (n.domain)"
    },
    {
      "type": "VECTOR",
      "node_label": "Chunk",
      "property": "embedding",
      "vector_dimension": 1536,
      "vector_similarity": "cosine",
      "cypher": "CREATE VECTOR INDEX chunk_embedding_vector IF NOT EXISTS FOR (n:Chunk) ON (n.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 1536, `vector.similarity_function`: 'cosine'}}"
    }
  ],
  "import_queries": [
    {
      "description": "Import Article nodes (Best Practice: MERGE)",
      "cypher": "// Create Article nodes using MERGE with ID only (Best Practice)\n                        LOAD CSV WITH HEADERS FROM 'file:///data.csv' AS row\n                        WITH row WHERE row.id IS NOT NULL\n                        MERGE (n:Article {id: row.id})\nSET n.title = CASE WHEN row.title IS NOT NULL THEN row.title ELSE n.title END, n.content = CASE WHEN row.content IS NOT NULL THEN row.content ELSE n.content END, n.summary = CASE WHEN row.summary IS NOT NULL THEN row.summary ELSE n.summary END, n.publish_date = CASE WHEN row.publish_date IS NOT NULL THEN row.publish_date ELSE n.publish_date END, n.word_count = CASE WHEN row.word_count IS NOT NULL THEN row.word_count ELSE n.word_count END, n.is_latest = CASE WHEN row.is_latest IS NOT NULL THEN row.is_latest ELSE n.is_latest END",
      "node_type": "Article",
      "uses_best_practices": true
    },
    {
      "description": "Import Website nodes (Best Practice: MERGE)",
      "cypher": "// Create Website nodes using MERGE with ID only (Best Practice)\n                        LOAD CSV WITH HEADERS FROM 'file:///data.csv' AS row\n                        WITH row WHERE row.domain IS NOT NULL\n                        MERGE (n:Website {site_domain: row.domain})\nSET n.name = CASE WHEN row.site_name IS NOT NULL THEN row.site_name ELSE n.name END\nSET n:Source",
      "node_type": "Website",
      "uses_best_practices": true
    },
    {
      "description": "Import Author nodes (Best Practice: MERGE)",
      "cypher": "// Create Author nodes using MERGE\n                    LOAD CSV WITH HEADERS FROM 'file:///data.csv' AS row\n                    MERGE (n:Author {})",
      "node_type": "Author",
      "uses_best_practices": true
    },
    {
      "description": "Import Chunk nodes (Best Practice: MERGE)",
      "cypher": "// Create Chunk nodes using MERGE\n                    LOAD CSV WITH HEADERS FROM 'file:///data.csv' AS row\n                    MERGE (n:Chunk {embedding: row.embedding})",
      "node_type": "Chunk",
      "uses_best_practices": true
    },
    {
      "description": "Create PUBLISHED_ON relationships (Best Practice: MERGE)",
      "cypher": "// Create PUBLISHED_ON relationships using MERGE (Best Practice)\n                        LOAD CSV WITH HEADERS FROM 'file:///data.csv' AS row\n                        MATCH (start:Article {domain: row.domain})\n                        MATCH (end:Website {domain: row.domain})\n                        MERGE (start)-[r:PUBLISHED_ON]->(end)\n                        SET url: row.url",
      "relationship_type": "PUBLISHED_ON",
      "uses_best_practices": true
    },
    {
      "description": "Create HAS_CHUNK relationships (Best Practice: MERGE)",
      "cypher": "// Create HAS_CHUNK relationships using MERGE (Best Practice)\n                        LOAD CSV WITH HEADERS FROM 'file:///data.csv' AS row\n                        MATCH (start:Article {id: row.id})\n                        MATCH (end:Chunk {chunk_id: row.chunk_id})\n                        MERGE (start)-[r:HAS_CHUNK]->(end)",
      "relationship_type": "HAS_CHUNK",
      "uses_best_practices": true
    },
    {
      "description": "Create WRITTEN_BY relationships (Best Practice: MERGE)",
      "cypher": "// Create WRITTEN_BY relationships using MERGE (Best Practice)\n                        LOAD CSV WITH HEADERS FROM 'file:///data.csv' AS row\n                        MATCH (start:Article {author: row.author})\n                        MATCH (end:Author {name: row.name})\n                        MERGE (start)-[r:WRITTEN_BY]->(end)\n                        SET publish_date: row.publish_date",
      "relationship_type": "WRITTEN_BY",
      "uses_best_practices": true
    },
    {
      "description": "Create TAGGED_WITH relationships (Best Practice: MERGE)",
      "cypher": "// Create TAGGED_WITH relationships using MERGE (Best Practice)\n                        LOAD CSV WITH HEADERS FROM 'file:///data.csv' AS row\n                        MATCH (start:Article {id: row.id})\n                        MATCH (end:Tag {tag_name: row.tag_name})\n                        MERGE (start)-[r:TAGGED_WITH]->(end)",
      "relationship_type": "TAGGED_WITH",
      "uses_best_practices": true
    }
  ],
  "configuration": {
    "include_columns": [
      "id",
      "url",
      "domain",
      "site_name",
      "title",
      "author",
      "publish_date",
      "content",
      "summary",
      "tags",
      "language",
      "word_count",
      "meta_description",
      "is_latest",
      "run_id"
    ],
    "nodes": [
      {
        "label": "Article",
        "node_id_property": "id",
        "properties": [
          {
            "name": "id",
            "type": "string",
            "unique": true
          },
          {
            "name": "title",
            "type": "string",
            "indexed": true
          },
          {
            "name": "content",
            "type": "text",
            "indexed": true
          },
          {
            "name": "summary",
            "type": "text"
          },
          {
            "name": "publish_date",
            "type": "datetime"
          },
          {
            "name": "word_count",
            "type": "integer"
          },
          {
            "name": "is_latest",
            "type": "boolean"
          }
        ]
      },
      {
        "label": "Website",
        "node_id_property": "domain",
        "properties": [
          {
            "name": "domain",
            "type": "string",
            "unique": true,
            "alias": "site_domain"
          },
          {
            "name": "site_name",
            "type": "string",
            "indexed": true,
            "alias": "name"
          }
        ],
        "multiple_labels": [
          "Source"
        ]
      },
      {
        "label": "Author",
        "node_id_property": "author",
        "properties": [
          {
            "name": "name",
            "type": "string",
            "unique": true
          }
        ]
      },
      {
        "label": "Chunk",
        "node_id_property": "chunk_id",
        "properties": [
          {
            "name": "chunk_id",
            "type": "string",
            "unique": true
          },
          {
            "name": "embedding",
            "type": "vector",
            "vector_dimension": 1536,
            "vector_similarity": "cosine"
          },
          {
            "name": "chunk_text",
            "type": "text"
          }
        ]
      }
    ],
    "relationships": [
      {
        "type": "PUBLISHED_ON",
        "start_node": "Article",
        "end_node": "Website",
        "start_property": "domain",
        "end_property": "domain",
        "properties": [
          {
            "name": "url",
            "type": "string"
          }
        ]
      },
      {
        "type": "HAS_CHUNK",
        "start_node": "Article",
        "end_node": "Chunk",
        "start_property": "id",
        "end_property": "chunk_id",
        "properties": [
          {
            "name": "chunk_order",
            "type": "integer"
          },
          {
            "name": "chunk_position",
            "type": "integer"
          }
        ]
      },
      {
        "type": "WRITTEN_BY",
        "start_node": "Article",
        "end_node": "Author",
        "start_property": "author",
        "end_property": "name",
        "properties": [
          {
            "name": "publish_date",
            "type": "datetime"
          }
        ]
      },
      {
        "type": "TAGGED_WITH",
        "start_node": "Article",
        "end_node": "Tag",
        "start_property": "id",
        "end_property": "tag_name",
        "properties": []
      }
    ],
    "extra_indexes": [
      {
        "node_label": "Article",
        "property": "publish_date",
        "type": "RANGE"
      },
      {
        "node_label": "Website",
        "property": "domain",
        "type": "TEXT"
      },
      {
        "node_label": "Chunk",
        "property": "embedding",
        "type": "VECTOR",
        "vector_dimension": 1536,
        "vector_similarity": "cosine"
      }
    ],
    "global_aliases": {
      "Article_text": "Article",
      "article_title": "title",
      "publication_date": "publish_date",
      "source_domain": "domain"
    },
    "best_practices": {
      "use_merge_for_nodes": true,
      "use_merge_for_relationships": true,
      "node_creation": {
        "merge_on_id_only": true,
        "separate_set_properties": true
      },
      "relationship_creation": {
        "merge_relationships": true,
        "merge_with_properties": false
      },
      "performance": {
        "use_unwind_for_batch": true,
        "batch_size": 1000
      },
      "data_integrity": {
        "skip_null_properties": true,
        "validate_required_properties": true
      }
    }
  }
}