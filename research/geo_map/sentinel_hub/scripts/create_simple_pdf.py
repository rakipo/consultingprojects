#!/usr/bin/env python3
"""
Create Simple PDF Guide for Batch Analysis Output Interpretation
Uses reportlab for PDF creation (fewer system dependencies)
"""

from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
import os
from datetime import datetime

def create_pdf_guide():
    """Create a comprehensive PDF guide for batch analysis interpretation"""
    
    # Create PDF filename with timestamp
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    pdf_filename = f"Batch_Analysis_Interpretation_Guide_{timestamp}.pdf"
    
    # Create the PDF document
    doc = SimpleDocTemplate(pdf_filename, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    
    # Get styles
    styles = getSampleStyleSheet()
    
    # Create custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.darkblue
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=12,
        spaceBefore=20,
        textColor=colors.darkblue
    )
    
    subheading_style = ParagraphStyle(
        'CustomSubHeading',
        parent=styles['Heading3'],
        fontSize=14,
        spaceAfter=8,
        spaceBefore=15,
        textColor=colors.blue
    )
    
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=6,
        alignment=TA_JUSTIFY
    )
    
    # Build the story (content)
    story = []
    
    # Title page
    story.append(Paragraph("üè† Batch Analysis Output Interpretation Guide", title_style))
    story.append(Spacer(1, 20))
    story.append(Paragraph("Datalegos Tech Solutions Pvt. Ltd. Land Monitoring System", styles['Heading2']))
    story.append(Spacer(1, 10))
    story.append(Paragraph("Comprehensive Guide for Interpreting CSV Analysis Results", styles['Normal']))
    story.append(Spacer(1, 20))
    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}", styles['Normal']))
    story.append(PageBreak())
    
    # Overview
    story.append(Paragraph("Overview", heading_style))
    story.append(Paragraph("This guide explains how to interpret the comprehensive CSV output generated by the Datalegos Tech Solutions Pvt. Ltd. Batch Property Analyzer. The output provides detailed land cover change analysis for multiple properties over specified time periods.", normal_style))
    story.append(Spacer(1, 12))
    
    # File Naming Convention
    story.append(Paragraph("File Naming Convention", heading_style))
    story.append(Paragraph("Example: 20250810_153259_batch_analysis_before2022-11-01-2023-01-31_after2025-01-01-2025-03-31.csv", normal_style))
    story.append(Spacer(1, 12))
    
    components_data = [
        ['Component', 'Description'],
        ['20250810_153259', 'Timestamp (YYYYMMDD_HHMMSS)'],
        ['batch_analysis', 'Analysis type'],
        ['before2022-11-01-2023-01-31', 'Before period (baseline)'],
        ['after2025-01-01-2025-03-31', 'After period (current)']
    ]
    
    components_table = Table(components_data, colWidths=[2*inch, 4*inch])
    components_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(components_table)
    story.append(PageBreak())
    
    # CSV Structure
    story.append(Paragraph("CSV Structure and Columns", heading_style))
    story.append(Paragraph("The CSV output contains comprehensive analysis results organized into five main column groups:", normal_style))
    story.append(Spacer(1, 12))
    
    # Property Identification
    story.append(Paragraph("1. Property Identification Columns", subheading_style))
    prop_id_data = [
        ['Column', 'Description', 'Example', 'Notes'],
        ['lp_no', 'License Plate/Project Number', '2.0', 'Property identifier'],
        ['extent_ac', 'Land Area in Acres', '206.49', 'Used for bounding box calculation'],
        ['POINT_ID', 'Point Identifier', '1.0', 'Sequential point number'],
        ['EASTING-X', 'Easting Coordinate', '340751.55', 'Projected coordinate system'],
        ['NORTHING-Y', 'Northing Coordinate', '1590485.86', 'Projected coordinate system'],
        ['LATITUDE', 'Latitude', '14.382015', 'Geographic coordinate (decimal degrees)'],
        ['LONGITUDE', 'Longitude', '79.523023', 'Geographic coordinate (decimal degrees)']
    ]
    
    prop_id_table = Table(prop_id_data, colWidths=[1.2*inch, 2*inch, 1.2*inch, 1.6*inch])
    prop_id_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(prop_id_table)
    story.append(Spacer(1, 12))
    
    # Time Periods
    story.append(Paragraph("2. Time Period Columns", subheading_style))
    time_data = [
        ['Column', 'Description', 'Format', 'Example'],
        ['Before Period Start', 'Baseline period start', 'YYYY-MM-DD', '2022-11-01'],
        ['Before Period End', 'Baseline period end', 'YYYY-MM-DD', '2023-01-31'],
        ['After Period Start', 'Current period start', 'YYYY-MM-DD', '2025-01-01'],
        ['After Period End', 'Current period end', 'YYYY-MM-DD', '2025-03-31']
    ]
    
    time_table = Table(time_data, colWidths=[1.5*inch, 2*inch, 1*inch, 1.5*inch])
    time_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(time_table)
    story.append(PageBreak())
    
    # Analysis Indices
    story.append(Paragraph("3. Analysis Indices", heading_style))
    story.append(Paragraph("The CSV contains three main analysis indices, each with 5 columns (Before Value, After Value, Difference, Interpretation, Significance):", normal_style))
    story.append(Spacer(1, 12))
    
    # NDVI
    story.append(Paragraph("Vegetation Analysis (NDVI)", subheading_style))
    story.append(Paragraph("Normalized Difference Vegetation Index - Measures vegetation health and density", normal_style))
    ndvi_data = [
        ['Column', 'Description', 'Range', 'Interpretation'],
        ['Vegetation (NDVI)-Before Value', 'NDVI before period', '0-255', 'Higher = more vegetation'],
        ['Vegetation (NDVI)-After Value', 'NDVI after period', '0-255', 'Higher = more vegetation'],
        ['Vegetation (NDVI)-Difference', 'Change in NDVI', 'Any value', 'Positive = growth, Negative = loss'],
        ['Vegetation (NDVI)-Interpretation', 'Human-readable result', 'Text', 'Growth, loss, or no change'],
        ['Vegetation (NDVI)-Significance', 'Statistical significance', 'Yes/No', 'Whether change is significant']
    ]
    
    ndvi_table = Table(ndvi_data, colWidths=[2*inch, 2*inch, 1*inch, 1*inch])
    ndvi_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(ndvi_table)
    story.append(Spacer(1, 12))
    
    # NDBI
    story.append(Paragraph("Built-up Area Analysis (NDBI)", subheading_style))
    story.append(Paragraph("Normalized Difference Built-up Index - Detects built-up areas and construction", normal_style))
    ndbi_data = [
        ['Column', 'Description', 'Range', 'Interpretation'],
        ['Built-up Area (NDBI)-Before Value', 'NDBI before period', '0-255', 'Higher = more built-up'],
        ['Built-up Area (NDBI)-After Value', 'NDBI after period', '0-255', 'Higher = more built-up'],
        ['Built-up Area (NDBI)-Difference', 'Change in NDBI', 'Any value', 'Positive = construction, Negative = demolition'],
        ['Built-up Area (NDBI)-Interpretation', 'Human-readable result', 'Text', 'Construction, demolition, or no change'],
        ['Built-up Area (NDBI)-Significance', 'Statistical significance', 'Yes/No', 'Whether change is significant']
    ]
    
    ndbi_table = Table(ndbi_data, colWidths=[2*inch, 2*inch, 1*inch, 1*inch])
    ndbi_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(ndbi_table)
    story.append(Spacer(1, 12))
    
    # NDWI
    story.append(Paragraph("Water/Moisture Analysis (NDWI)", subheading_style))
    story.append(Paragraph("Normalized Difference Water Index - Detects water bodies and moisture", normal_style))
    ndwi_data = [
        ['Column', 'Description', 'Range', 'Interpretation'],
        ['Water/Moisture (NDWI)-Before Value', 'NDWI before period', '0-255', 'Higher = more water'],
        ['Water/Moisture (NDWI)-After Value', 'NDWI after period', '0-255', 'Higher = more water'],
        ['Water/Moisture (NDWI)-Difference', 'Change in NDWI', 'Any value', 'Positive = more water, Negative = less water'],
        ['Water/Moisture (NDWI)-Interpretation', 'Human-readable result', 'Text', 'Water increase, decrease, or no change'],
        ['Water/Moisture (NDWI)-Significance', 'Statistical significance', 'Yes/No', 'Whether change is significant']
    ]
    
    ndwi_table = Table(ndwi_data, colWidths=[2*inch, 2*inch, 1*inch, 1*inch])
    ndwi_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightcyan),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(ndwi_table)
    story.append(PageBreak())
    
    # Sample Analysis
    story.append(Paragraph("Sample Data Analysis", heading_style))
    
    story.append(Paragraph("Property 1 Analysis", subheading_style))
    story.append(Paragraph("Location: 14.382015, 79.523023", normal_style))
    story.append(Paragraph("Land Area: 206.49 acres", normal_style))
    story.append(Paragraph("Time Period: Nov 2022 - Jan 2023 vs Jan 2025 - Mar 2025", normal_style))
    story.append(Spacer(1, 12))
    
    sample_data = [
        ['Analysis Type', 'Before', 'After', 'Change', 'Interpretation', 'Significance'],
        ['Vegetation (NDVI)', '102.5', '118.25', '+15.75', 'Vegetation growth or improvement', 'Yes'],
        ['Built-up Area (NDBI)', '0.0', '11.5', '+11.5', 'Construction or development increase', 'Yes'],
        ['Water/Moisture (NDWI)', '0.0', '0.0', '0.0', 'No significant water change', 'No']
    ]
    
    sample_table = Table(sample_data, colWidths=[1.5*inch, 0.8*inch, 0.8*inch, 0.8*inch, 1.5*inch, 0.6*inch])
    sample_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(sample_table)
    story.append(Spacer(1, 12))
    story.append(Paragraph("Summary: This property shows significant vegetation growth and new construction activity, with no water changes.", normal_style))
    story.append(PageBreak())
    
    # Statistical Significance
    story.append(Paragraph("Statistical Significance", heading_style))
    story.append(Paragraph("Threshold System:", normal_style))
    story.append(Paragraph("‚Ä¢ Default Threshold: 0.1 (10% change)", normal_style))
    story.append(Paragraph("‚Ä¢ Significance: Changes above threshold are marked 'Yes'", normal_style))
    story.append(Paragraph("‚Ä¢ Non-significance: Changes below threshold are marked 'No'", normal_style))
    story.append(Spacer(1, 12))
    story.append(Paragraph("Why Significance Matters:", normal_style))
    story.append(Paragraph("‚Ä¢ Significant Changes: Require attention and monitoring", normal_style))
    story.append(Paragraph("‚Ä¢ Non-significant Changes: Normal variations or measurement noise", normal_style))
    story.append(Paragraph("‚Ä¢ Multiple Significant Changes: Indicate major land use transformation", normal_style))
    story.append(Spacer(1, 12))
    
    # Common Scenarios
    story.append(Paragraph("Common Scenarios and Interpretations", heading_style))
    
    scenarios_data = [
        ['Scenario', 'Vegetation', 'Built-up', 'Water'],
        ['Agricultural Development', 'Significant increase (new crops)', 'Moderate increase (farm infrastructure)', 'No change or moderate increase (irrigation)'],
        ['Urban Development', 'Significant decrease (clearing)', 'Significant increase (construction)', 'Decrease (drainage changes)'],
        ['Natural Disaster Recovery', 'Decrease then recovery', 'Decrease (damage)', 'Increase (flooding) then decrease'],
        ['Seasonal Changes', 'Moderate seasonal variations', 'No change', 'Seasonal variations']
    ]
    
    scenarios_table = Table(scenarios_data, colWidths=[1.5*inch, 1.5*inch, 1.5*inch, 1.5*inch])
    scenarios_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(scenarios_table)
    story.append(PageBreak())
    
    # Actionable Insights
    story.append(Paragraph("Actionable Insights", heading_style))
    
    story.append(Paragraph("For Property Managers:", subheading_style))
    story.append(Paragraph("‚Ä¢ Monitor Significant Changes: Focus on properties with 'Yes' significance", normal_style))
    story.append(Paragraph("‚Ä¢ Track Trends: Compare multiple time periods", normal_style))
    story.append(Paragraph("‚Ä¢ Validate Results: Cross-reference with ground truth", normal_style))
    story.append(Spacer(1, 12))
    
    story.append(Paragraph("For Planners:", subheading_style))
    story.append(Paragraph("‚Ä¢ Identify Hotspots: Areas with multiple significant changes", normal_style))
    story.append(Paragraph("‚Ä¢ Assess Impact: Environmental and development implications", normal_style))
    story.append(Paragraph("‚Ä¢ Plan Interventions: Based on change patterns", normal_style))
    story.append(Spacer(1, 12))
    
    story.append(Paragraph("For Analysts:", subheading_style))
    story.append(Paragraph("‚Ä¢ Statistical Analysis: Use difference values for quantitative analysis", normal_style))
    story.append(Paragraph("‚Ä¢ Trend Analysis: Compare across multiple properties", normal_style))
    story.append(Paragraph("‚Ä¢ Risk Assessment: Identify areas of concern", normal_style))
    story.append(Spacer(1, 12))
    
    # Technical Notes
    story.append(Paragraph("Technical Notes", heading_style))
    story.append(Paragraph("Data Processing:", normal_style))
    story.append(Paragraph("‚Ä¢ Resolution: 10m Sentinel-2 imagery", normal_style))
    story.append(Paragraph("‚Ä¢ Cloud Filtering: Maximum 20% cloud coverage", normal_style))
    story.append(Paragraph("‚Ä¢ Temporal Aggregation: Multi-date composites for each period", normal_style))
    story.append(Paragraph("‚Ä¢ Powered by Datalegos Tech Solutions Pvt. Ltd. analysis engine", normal_style))
    story.append(Spacer(1, 12))
    
    story.append(Paragraph("Limitations:", normal_style))
    story.append(Paragraph("‚Ä¢ Weather Dependent: Cloud coverage affects data availability", normal_style))
    story.append(Paragraph("‚Ä¢ Resolution Limits: Small changes may not be detected", normal_style))
    story.append(Paragraph("‚Ä¢ Temporal Gaps: Data availability varies by location", normal_style))
    story.append(Spacer(1, 12))
    
    story.append(Paragraph("Recommendations:", normal_style))
    story.append(Paragraph("‚Ä¢ Use Multiple Periods: Compare several time periods for trends", normal_style))
    story.append(Paragraph("‚Ä¢ Validate Results: Cross-reference with other data sources", normal_style))
    story.append(Paragraph("‚Ä¢ Consider Context: Account for local conditions and events", normal_style))
    story.append(Paragraph("‚Ä¢ Monitor Continuously: Regular analysis for ongoing changes", normal_style))
    story.append(Spacer(1, 12))
    
    # Conclusion
    story.append(Paragraph("Conclusion", heading_style))
    story.append(Paragraph("The batch analysis output provides comprehensive land cover change information for multiple properties. Understanding the column structure, interpretation values, and significance thresholds enables effective use of this data for property monitoring, planning, and decision-making. This analysis is powered by Datalegos Tech Solutions Pvt. Ltd.", normal_style))
    story.append(Spacer(1, 12))
    story.append(Paragraph("Key takeaways:", normal_style))
    story.append(Paragraph("‚Ä¢ Focus on significant changes (marked 'Yes')", normal_style))
    story.append(Paragraph("‚Ä¢ Consider the full context of all three indices", normal_style))
    story.append(Paragraph("‚Ä¢ Validate results with ground truth when possible", normal_style))
    story.append(Paragraph("‚Ä¢ Use for trend analysis across multiple time periods", normal_style))
    
    # Build the PDF
    try:
        doc.build(story)
        print(f"‚úÖ PDF Guide created successfully: {pdf_filename}")
        print(f"üìÑ File size: {os.path.getsize(pdf_filename) / 1024:.1f} KB")
        return pdf_filename
    except Exception as e:
        print(f"‚ùå Error creating PDF: {str(e)}")
        return None

if __name__ == "__main__":
    print("üìÑ Creating Batch Analysis Output Interpretation Guide PDF...")
    pdf_file = create_pdf_guide()
    
    if pdf_file:
        print(f"üéâ PDF guide successfully created: {pdf_file}")
        print("üìñ You can now open this PDF to view the complete interpretation guide.")
    else:
        print("‚ùå Could not create PDF.")
