# Sentinel Hub Configuration File
# This file contains system-level configuration parameters for the land monitoring system
# User-specific settings are in sentinel_hub_user_config.csv

# Sentinel Hub Authentication (OAuth - no instance ID needed)
sentinel_hub:
  client_id: "1ecf7748-4066-4ba1-a3df-3ea2517cf7f6"      # OAuth credentials
  client_secret: "lCK9t1qjeD1mKjcmW9sZ1wqMCFwD1RsQ"

# User Configuration File Path
# Path to the YAML file containing user-specific settings like coordinates
user_config_path: "sentinel_hub_user_config.yaml"

# Image Processing Settings
image_processing:
  resolution: 10  # 10m per pixel for Sentinel-2
  max_cloud_coverage: 20.0  # Maximum allowed cloud coverage percentage

# Change Detection Parameters
change_detection:
  default_threshold: 0.1  # Threshold for significant change detection
  ndvi_thresholds:
    major_increase: 0.15
    moderate_increase: 0.05
    major_decrease: -0.15
    moderate_decrease: -0.05
  ndbi_thresholds:
    significant_construction: 0.1
    minor_increase: 0.03
    demolition: -0.03
  ndwi_thresholds:
    water_appearance: 0.1
    water_reduction: -0.1

# Monitoring Schedule
monitoring:
  default_interval_days: 30
  period_length_days: 15  # Length of each comparison period

# Email Alert Configuration
email:
  smtp_server: "smtp.gmail.com"
  smtp_port: 587
  sender_email: "your_email@gmail.com"
  sender_password: "your_app_password"  # Use App Password for Gmail
  recipient_email: "recipient@gmail.com"
  enable_alerts: true

# Default Date Ranges for Examples
default_dates:
  before_period:
    start: "2022-11-01"
    end: "2023-01-31"
  after_period:
    start: "2025-01-01"
    end: "2025-03-31"
  continuous_monitoring:
    start: "2023-01-01"
    end: "2025-07-31"

# Output Settings
output:
  save_comparison_images: true
  comparison_image_path: "land_comparison.png"
  dpi: 300
  base_directory: "analysis_results"  # Base directory for all analysis outputs

# Evaluation Scripts (JavaScript for Sentinel Hub)
evalscripts:
  true_color: |
    //VERSION=3
    function setup() {
        return {
            input: ["B02", "B03", "B04", "dataMask"],
            output: { bands: 4 }
        };
    }
    
    function evaluatePixel(sample) {
        return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02, sample.dataMask];
    }

  ndvi: |
    //VERSION=3
    function setup() {
        return {
            input: ["B04", "B08", "dataMask"],
            output: { bands: 2 }
        };
    }
    
    function evaluatePixel(sample) {
        let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04);
        return [ndvi, sample.dataMask];
    }

  ndbi: |
    //VERSION=3
    function setup() {
        return {
            input: ["B08", "B11", "dataMask"],
            output: { bands: 2 }
        };
    }
    
    function evaluatePixel(sample) {
        let ndbi = (sample.B11 - sample.B08) / (sample.B11 + sample.B08);
        return [ndbi, sample.dataMask];
    }

  ndwi: |
    //VERSION=3
    function setup() {
        return {
            input: ["B03", "B08", "dataMask"],
            output: { bands: 2 }
        };
    }
    
    function evaluatePixel(sample) {
        let ndwi = (sample.B03 - sample.B08) / (sample.B03 + sample.B08);
        return [ndwi, sample.dataMask];
    }

  change_detection: |
    //VERSION=3
    function setup() {
        return {
            input: [
                {
                    bands: ["B02", "B03", "B04", "B08", "B11"],
                    units: "DN"
                }
            ],
            output: { bands: 5 },
            mosaicking: "ORBIT"
        };
    }
    
    function evaluatePixel(samples) {
        // Return the most recent valid sample
        let sample = samples[0];
        
        // Calculate indices
        let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04);
        let ndbi = (sample.B11 - sample.B08) / (sample.B11 + sample.B08);
        let ndwi = (sample.B03 - sample.B08) / (sample.B03 + sample.B08);
        
        // Brightness index
        let brightness = (sample.B02 + sample.B03 + sample.B04) / 3;
        
        return [ndvi, ndbi, ndwi, brightness/3000, 1];
    }
