services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: mcp_postgres
    environment:
      POSTGRES_DB: movies
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d movies"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # pgAdmin Web Interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mcp_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@movies.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-network

  # Neo4j Database with APOC Plugin
  neo4j:
    image: neo4j:5.15-community
    container_name: mcp_neo4j
    environment:
      NEO4J_AUTH: neo4j/password123
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
      # APOC Plugin Configuration
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      # Additional APOC settings
      NEO4J_apoc_uuid_enabled: true
      NEO4J_apoc_trigger_enabled: true
      NEO4J_apoc_ttl_enabled: true
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p password123 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mcp-network

  # MCP Neo4j Data Modeling Server
  mcp-data-modeling:
    image: python:3.11-slim
    container_name: mcp_data_modeling
    working_dir: /app
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=movies
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password123
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password123
      - MCP_SERVER_NAME=mcp-neo4j-data-modeling
      - MCP_SERVER_VERSION=1.0.0
    volumes:
      - ./mcp-servers/data-modeling:/app
      - ./mcp-servers/shared:/app/shared
    command: >
      bash -c "
        pip install --no-cache-dir -r requirements.txt &&
        python -m mcp_neo4j_data_modeling
      "
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-network
    ports:
      - "8001:8001"

  # MCP Neo4j Cypher Server
  mcp-cypher:
    image: python:3.11-slim
    container_name: mcp_cypher
    working_dir: /app
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password123
      - MCP_SERVER_NAME=mcp-neo4j-cypher
      - MCP_SERVER_VERSION=1.0.0
    volumes:
      - ./mcp-servers/cypher:/app
      - ./mcp-servers/shared:/app/shared
    command: >
      bash -c "
        pip install --no-cache-dir -r requirements.txt &&
        python -m mcp_neo4j_cypher
      "
    depends_on:
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-network
    ports:
      - "8002:8002"

  # MCP Server Manager (Optional - for monitoring and management)
  mcp-manager:
    image: python:3.11-slim
    container_name: mcp_manager
    working_dir: /app
    environment:
      - MCP_DATA_MODELING_URL=http://mcp-data-modeling:8001
      - MCP_CYPHER_URL=http://mcp-cypher:8002
      - POSTGRES_HOST=postgres
      - NEO4J_URI=bolt://neo4j:7687
    volumes:
      - ./mcp-servers/manager:/app
      - ./mcp-servers/shared:/app/shared
    command: >
      bash -c "
        pip install --no-cache-dir fastapi uvicorn requests psycopg2-binary neo4j &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "
    depends_on:
      - mcp-data-modeling
      - mcp-cypher
    restart: unless-stopped
    networks:
      - mcp-network
    ports:
      - "8000:8000"

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:

networks:
  mcp-network:
    driver: bridge